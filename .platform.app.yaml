# This file describes an application. You can have multiple applications
# in the same project.

# Please see doc/platformsh/README.md and doc/platformsh/INSTALL.md
# NB: Clustered eZ Platform setups are not tested and are likely to have issues.

# The name of this app. Must be unique within a project.
name: app

# The type of the application to build.
type: php:7.1
build:
    # "none" means we're running composer manually, see build hook
    flavor: "none"

# The relationships of the application with services or other applications.
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form `<service name>:<endpoint name>`.
relationships:
    database: 'mysqldb:user'
    # Uncomment if you want to store dfs tables in a separate database:
    #dfs_database: 'mysqldb:dfs'
    rediscache: 'rediscache:redis'
    # If you wish to have a separate Redis instance for sessions, uncomment
    # this relationship and the corresponding service in .platform/services.yaml
    #redissession: 'redissession:redis'

variables:
    #php:
        # Example of setting php.ini config
        #"display_errors": "On"
    env:
        # For enterprise cluster, disable Symfony Proxy & instead use Fastly Bundle available on eZ Platform Enterprise
        #SYMFONY_HTTP_CACHE: 0
        # Change this to dev if you want to run site & commands in dev
        SYMFONY_ENV: prod
        # Uncomment if you want to use DFS clustering:
        #PLATFORMSH_DFS_NFS_PATH: 'dfsdata'

# The configuration of app when it is exposed to the web.
web:
    locations:
        "/":
            # The public directory of the app, relative to its root.
            root: "web"
            # The front-controller script to send non-static requests to.
            passthru: "/app.php"
            # The number of seconds whitelisted (static) content should be cache
            expires: 600

# The size of the persistent disk of the application (in MB).
disk: 2048

# The mounts that will be performed when the package is deployed.
mounts:
    "/app/cache": "shared:files/cache"
    "/app/logs": "shared:files/logs"
    "/web/var": "shared:files/files"
    # Uncomment if you want to use DFS clustering:
    #"/dfsdata": "shared:files/dfsdata"

# The hooks that will be performed when the package is deployed.
hooks:
    # Build hook, done once before connected to services, disk is still writable here
    build: |
        set -e
        rm web/app_dev.php
        . ./.env
        if [ "$SYMFONY_ENV" = "dev" ] ; then
            composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader
        else
            composer install --no-dev --prefer-dist --no-progress --no-interaction --optimize-autoloader
        fi
    # Deploy hook, access to services & done on each server (if cluster), only mounts are writable at this point
    deploy: |
        set -e
        . ./.env
        if [ ! -f web/var/.platform.installed ]; then
            php -d memory_limit=-1 app/console ezplatform:install $INSTALL_EZ_INSTALL_TYPE
            touch web/var/.platform.installed
        fi
        # As we are deploying code changes we need to clear any kind of code/system cache
        rm -f app/cache/*/*
        app/console cache:clear
        # Example of addtional deploy hooks if you use doctrine and/or kaliop migration bundle
        ##app/console doctrine:migrations:migrate --no-interaction --allow-no-migration
        ##app/console kaliop:migration:migrate --no-interaction --no-debug

# The configuration of scheduled execution.
# see http://symfony.com/doc/current/components/console/introduction.html
#crons:
#    symfony:
#        spec: "*/20 * * * *"
#        cmd: "php app/console ezpublish:cron:run"

runtime:
    extensions:
        - xsl
        - imagick
        - readline
        - redis
        #- apcu
        #- name: 'blackfire'
        #  configuration:
        #      server_id: 'xxxx-xxx-xxx-xxx-xxxx'
        #      server_token: 'xxxx'

