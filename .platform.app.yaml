# This file describes an application. You can have multiple applications
# in the same project.

# Please see doc/platformsh/README.md and doc/platformsh/INSTALL.md
# NB: Clustered eZ Platform setups are not tested and are likely to have issues.

# The name of this app. Must be unique within a project.
name: app

# The type of the application to build.
type: php:7.3
build:
    # "none" means we're running composer manually, see build hook
    flavor: "none"

# The relationships of the application with services or other applications.
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form `<service name>:<endpoint name>`.
relationships:
    database: 'mysqldb:user'
    # Uncomment if you want to store dfs tables in a separate database:
    #dfs_database: 'mysqldb:dfs'
    rediscache: 'rediscache:redis'
    # If you wish to have a separate Redis instance for sessions, uncomment
    # this relationship and the corresponding service in .platform/services.yaml
    #redissession: 'redissession:redis'
    # If you wish to use solr, uncomment this relationship and the corresponding service in .platform/services.yaml
    #solr: 'solrsearch:collection1'

variables:
    #php:
        # Example of setting php.ini config
        #"display_errors": "On"
    env:
        # We disable Symfony Proxy, as we rather use Varnish
        SYMFONY_HTTP_CACHE: 0
        SYMFONY_TRUSTED_PROXIES: "TRUST_REMOTE"
        # Change this if you use a different env then "prod", if you change this to "dev" remove "--no-dev" in build step
        SYMFONY_ENV: prod
        # Uncomment if you want to use DFS clustering:
        #PLATFORMSH_DFS_NFS_PATH: 'dfsdata'

# The configuration of app when it is exposed to the web.
web:
    locations:
        "/":
            # The public directory of the app, relative to its root.
            root: "web"
            # The front-controller script to send non-static requests to.
            passthru: "/app.php"
            # The number of seconds whitelisted (static) content should be cache
            expires: 600

# The size of the persistent disk of the application (in MB).
disk: 3072

# The mounts that will be performed when the package is deployed.
mounts:
    'app/cache':
        source: local
        source_path: cache
    'app/logs':
        source: local
        source_path: logs
    'web/var':
        source: local
        source_path: var
# Uncomment if you want to use DFS clustering, WARNING: Needs to be shared, contact Platform.sh support to set this up
#    'dfsdata':
#        source: shared
#        source_path: dfsdata


# The hooks that will be performed when the package is deployed.
hooks:
    # Build hook, done before connected to services, disk is still writable here
    build: |
        set -e

        # Inject GITHUB token if provided. This is handy if you have your own private repos, or need to avoid
        # github's API rate limit
        if [ -n "$GITHUB_TOKEN" ]; then
            composer config github-oauth.github.com $GITHUB_TOKEN
        fi

        rm web/app_dev.php
        composer install --no-dev --prefer-dist --no-progress --no-interaction --optimize-autoloader

    # Deploy hook, access to services & done once (per cluster, not per node), only mounts are writable at this point
    # Note: Http traffic is paused while this is running, so for prod code this should finish as fast as possible, < 30s
    deploy: |
        set -e
        # Mainly relevant for eZ Platform demo usage, for own setup adapt this or remove and rely on migrations.
        if [ ! -f web/var/.platform.installed ]; then
            . ./.env
            php -d memory_limit=-1 app/console ezplatform:install $INSTALL_EZ_INSTALL_TYPE
            touch web/var/.platform.installed
        fi

        # Now that mounts are available, clear class/container cache. E.g. in case of interface changes on lazy proxies
        rm -Rf app/cache/$SYMFONY_ENV/*.*

        # With that done, make sure to clear + warmup all remaining caches to take proper env variables into account
        app/console cache:clear

        # Example of additional deploy hooks if you use doctrine and/or kaliop migration bundle
        ##app/console doctrine:migrations:migrate --no-interaction --allow-no-migration
        ##app/console kaliop:migration:migrate --no-interaction --no-debug

    # Post deploy hook, like deploy but after being deployed and live, for deploy tasks we can do asynchronously
    #post_deploy: |
    #    set -e

# The configuration of scheduled execution.
# see http://symfony.com/doc/current/components/console/introduction.html
#crons:
#    symfony:
#        spec: "*/20 * * * *"
#        cmd: "php app/console ezpublish:cron:run"

runtime:
    extensions:
        - xsl
        - imagick
        - readline
        - redis
        #- apcu
        #- name: 'blackfire'
        #  configuration:
        #      server_id: 'xxxx-xxx-xxx-xxx-xxxx'
        #      server_token: 'xxxx'

